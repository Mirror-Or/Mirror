//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DialogueTest/DialogueInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogueInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogueInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogueInputAction"",
    ""maps"": [
        {
            ""name"": ""Dialogue"",
            ""id"": ""323ec1fe-d41f-4822-a22c-a0b216b55982"",
            ""actions"": [
                {
                    ""name"": ""Next Sentence"",
                    ""type"": ""Value"",
                    ""id"": ""b69bba5a-7a05-4ef1-b4d0-247b1014ab85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Value"",
                    ""id"": ""ae53f8a9-3309-45b6-9e25-577ff76e2eb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel Skip"",
                    ""type"": ""Value"",
                    ""id"": ""7e13430d-90f4-47cd-8651-a021b951ec6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Real Skip"",
                    ""type"": ""Value"",
                    ""id"": ""c12506ee-0115-4172-b821-4ec1acf99ba4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45cdb448-e7e8-4bdf-bd22-067378ea3eb0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Sentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ecc1fc4-152e-433c-933f-65d1ee66b738"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Sentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0f0d739-dbd1-4f53-93a8-92a92496416c"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9cd37ff-5944-41eb-9387-4c732946e367"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c092fa66-68d6-4ded-81ac-df131e3587b2"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Real Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_NextSentence = m_Dialogue.FindAction("Next Sentence", throwIfNotFound: true);
        m_Dialogue_Skip = m_Dialogue.FindAction("Skip", throwIfNotFound: true);
        m_Dialogue_CancelSkip = m_Dialogue.FindAction("Cancel Skip", throwIfNotFound: true);
        m_Dialogue_RealSkip = m_Dialogue.FindAction("Real Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_NextSentence;
    private readonly InputAction m_Dialogue_Skip;
    private readonly InputAction m_Dialogue_CancelSkip;
    private readonly InputAction m_Dialogue_RealSkip;
    public struct DialogueActions
    {
        private @DialogueInputAction m_Wrapper;
        public DialogueActions(@DialogueInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSentence => m_Wrapper.m_Dialogue_NextSentence;
        public InputAction @Skip => m_Wrapper.m_Dialogue_Skip;
        public InputAction @CancelSkip => m_Wrapper.m_Dialogue_CancelSkip;
        public InputAction @RealSkip => m_Wrapper.m_Dialogue_RealSkip;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @NextSentence.started += instance.OnNextSentence;
            @NextSentence.performed += instance.OnNextSentence;
            @NextSentence.canceled += instance.OnNextSentence;
            @Skip.started += instance.OnSkip;
            @Skip.performed += instance.OnSkip;
            @Skip.canceled += instance.OnSkip;
            @CancelSkip.started += instance.OnCancelSkip;
            @CancelSkip.performed += instance.OnCancelSkip;
            @CancelSkip.canceled += instance.OnCancelSkip;
            @RealSkip.started += instance.OnRealSkip;
            @RealSkip.performed += instance.OnRealSkip;
            @RealSkip.canceled += instance.OnRealSkip;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @NextSentence.started -= instance.OnNextSentence;
            @NextSentence.performed -= instance.OnNextSentence;
            @NextSentence.canceled -= instance.OnNextSentence;
            @Skip.started -= instance.OnSkip;
            @Skip.performed -= instance.OnSkip;
            @Skip.canceled -= instance.OnSkip;
            @CancelSkip.started -= instance.OnCancelSkip;
            @CancelSkip.performed -= instance.OnCancelSkip;
            @CancelSkip.canceled -= instance.OnCancelSkip;
            @RealSkip.started -= instance.OnRealSkip;
            @RealSkip.performed -= instance.OnRealSkip;
            @RealSkip.canceled -= instance.OnRealSkip;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);
    public interface IDialogueActions
    {
        void OnNextSentence(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnCancelSkip(InputAction.CallbackContext context);
        void OnRealSkip(InputAction.CallbackContext context);
    }
}
